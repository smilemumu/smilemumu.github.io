<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高并发 on Shi.bro的博客</title>
    <link>/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 高并发 on Shi.bro的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 08 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>系统高并发</title>
      <link>/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%B9%B6%E5%8F%91/</guid>
      <description>系统高并发 1.集群化部署 采用nginx负载均衡将请求分发到多台机器上。
2.数据库分库(比较麻烦)分表分区、读写分离 3.缓存集群 写数据库的时候同时写一份数据到缓存集群里，然后用缓存集群来承载大部分的读请求。这样的话，通过缓存集群，就可以用更少的机器资源承载更高的并发。
4.消息中间件 可以引入消息中间件集群，把允许异步化的请求请求写入MQ，然后基于MQ做一个削峰填谷。</description>
    </item>
    
  </channel>
</rss>