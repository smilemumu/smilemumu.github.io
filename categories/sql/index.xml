<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Shi.bro的博客</title>
    <link>/categories/sql/</link>
    <description>Recent content in SQL on Shi.bro的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 17 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>乐观锁和悲观锁</title>
      <link>/sql/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/sql/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</guid>
      <description>乐观锁和悲观锁 1.乐观锁  总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现  version方式： 一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。
update table set x=x+1, version=version+1 where id=#{id} and version=#{version};  CAS操作方式： 即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。
2.悲观锁  总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁。 比如共享锁和排他锁（行锁，表锁的读写锁）都是悲观锁。  3.适用场景  悲观锁：比较适合写入操作比较频繁的场景，如果出现 大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。 乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。 总结：两种所各有优缺点，读取频繁使用乐观锁，写入频繁使用悲观锁。  参考：https://blog.csdn.net/weixin_41835916/article/details/81487767</description>
    </item>
    
    <item>
      <title>SQL语法</title>
      <link>/sql/sql-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/sql/sql-%E8%AF%AD%E6%B3%95/</guid>
      <description>Mysql  Mysql分页
select * from stu limit m, n; //m = (startPage-1)*pageSize,n = pageSize  第一个参数值m表示起始行，第二个参数表示取多少行（页面大小） mysql从0开始计数行数
Oracle Oralce分页
select * from ( select rownum rn,a.* from table_name a where rownum &amp;lt;= x //结束行，x = startPage*pageSize ) where rn &amp;gt;= y; //起始行，y = (startPage-1)*pageSize+1  创建索引
create index index_name(idx_****) on table table_name(column1_name,column2_name);  oracle只查第一条数据
select * from (select * from &amp;lt;table&amp;gt; order by &amp;lt;key&amp;gt; desc) where rownum=1;  oracle触发器</description>
    </item>
    
  </channel>
</rss>